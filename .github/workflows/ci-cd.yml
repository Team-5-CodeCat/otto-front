name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Setup NPM authentication for GitHub Packages
        run: |
          set -e  # Exit on error
          echo "@Team-5-CodeCat:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.OTTO_SDK_PACKAGE_TOKEN }}" >> ~/.npmrc

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: npx eslint .

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Create .env.production
        run: |
          set -e  # Exit on error
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" > .env.production
          echo "NEXT_PUBLIC_GITHUB_APP_NAME=${{ secrets.NEXT_PUBLIC_GITHUB_APP_NAME }}" >> .env.production
          echo "PORT=${{ secrets.PORT }}" >> .env.production
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env.production

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next
            public
            package.json
            pnpm-lock.yaml
          retention-days: 7

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Setup NPM authentication for GitHub Packages
        run: |
          set -e  # Exit on error
          echo "@Team-5-CodeCat:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.OTTO_SDK_PACKAGE_TOKEN }}" >> ~/.npmrc

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env.production
        run: |
          set -e  # Exit on error
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" > .env.production
          echo "NEXT_PUBLIC_GITHUB_APP_NAME=${{ secrets.NEXT_PUBLIC_GITHUB_APP_NAME }}" >> .env.production
          echo "PORT=${{ secrets.PORT }}" >> .env.production
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env.production

      - name: Build application
        run: pnpm build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            # Exit immediately if any command fails
            set -euo pipefail

            # Enable error reporting
            trap 'echo "Error occurred at line $LINENO with exit code $?"' ERR

            echo "Starting deployment..."

            # Ensure Node.js is available
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            fi
            if [ -s "$NVM_DIR/bash_completion" ]; then
              . "$NVM_DIR/bash_completion"
            fi

            # Add system paths
            export PATH="/usr/local/bin:/usr/bin:$PATH"

            # Verify Node.js is available
            if ! command -v node &> /dev/null; then
              echo "ERROR: Node.js is not installed!"
              exit 1
            fi
            echo "Node.js version: $(node --version)"

            # Fix ALL permission issues at once
            echo "Fixing file permissions..."

            # Fix .npmrc permissions if it exists
            if [ -f ~/.npmrc ]; then
              echo "Found existing ~/.npmrc, checking ownership..."
              ls -la ~/.npmrc
              
              # If owned by root or has wrong permissions, fix it
              if [ ! -w ~/.npmrc ]; then
                echo "Fixing .npmrc permissions..."
                sudo chown $USER:$USER ~/.npmrc || {
                  echo "Could not change ownership, removing file..."
                  sudo rm -f ~/.npmrc || {
                    echo "ERROR: Cannot fix or remove .npmrc"
                    exit 1
                  }
                }
              fi
            fi

            # Fix otto-front directory permissions
            if [ -d ~/otto-front ]; then
              echo "Fixing otto-front directory permissions..."
              sudo chown -R $USER:$USER ~/otto-front || {
                echo "ERROR: Failed to fix otto-front permissions"
                exit 1
              }
            fi

            # Navigate to project directory
            cd ~/otto-front || {
              echo "ERROR: Project directory ~/otto-front does not exist"
              exit 1
            }

            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main || {
              echo "ERROR: Git pull failed"
              exit 1
            }

            # Setup NPM authentication - now with fixed permissions
            echo "Setting up NPM authentication..."

            # Remove old .npmrc and create fresh
            rm -f ~/.npmrc
            touch ~/.npmrc
            chmod 644 ~/.npmrc

            # Write configuration
            echo "@Team-5-CodeCat:registry=https://npm.pkg.github.com" > ~/.npmrc || {
              echo "ERROR: Failed to write to .npmrc"
              exit 1
            }
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.OTTO_SDK_PACKAGE_TOKEN }}" >> ~/.npmrc || {
              echo "ERROR: Failed to add auth token to .npmrc"
              exit 1
            }

            echo ".npmrc created successfully"
            ls -la ~/.npmrc

            # Check and install pnpm if not exists
            if ! command -v pnpm &> /dev/null; then
              echo "pnpm not found, installing..."
              npm install -g pnpm || {
                echo "ERROR: Failed to install pnpm"
                exit 1
              }
            fi
            echo "pnpm version: $(pnpm --version)"

            # Install dependencies
            echo "Installing dependencies..."
            pnpm install --frozen-lockfile || {
              echo "ERROR: pnpm install failed"
              exit 1
            }

            # Create .env.production file
            echo "Creating .env.production..."
            {
              echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}"
              echo "NEXT_PUBLIC_GITHUB_APP_NAME=${{ secrets.NEXT_PUBLIC_GITHUB_APP_NAME }}"
              echo "PORT=${{ secrets.PORT }}"
              echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}"
              echo "NODE_ENV=production"
            } > .env.production || {
              echo "ERROR: Failed to create .env.production"
              exit 1
            }

            echo ".env.production created successfully"

            # Build the application
            echo "Building application..."
            pnpm build || {
              echo "ERROR: Build failed"
              exit 1
            }

            # Check and install PM2 if not exists
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found, installing..."
              npm install -g pm2 || {
                echo "ERROR: Failed to install PM2"
                exit 1
              }
            fi
            echo "PM2 version: $(pm2 --version)"

            # Deploy with PM2 (zero-downtime deployment)
            echo "Deploying application with PM2..."

            # Check if process exists
            if pm2 show otto-front &>/dev/null; then
              echo "Existing process found, performing zero-downtime reload..."
              # Reload for zero-downtime deployment
              pm2 reload otto-front --update-env || {
                echo "Reload failed, trying restart..."
                pm2 restart otto-front || {
                  echo "Restart failed, starting fresh..."
                  pm2 delete otto-front
                  pm2 start npm --name "otto-front" -- start || {
                    echo "ERROR: Failed to start application with PM2"
                    exit 1
                  }
                }
              }
            else
              echo "No existing process found, starting application..."
              # First time deployment
              pm2 start npm --name "otto-front" -- start || {
                echo "ERROR: Failed to start application with PM2"
                exit 1
              }
            fi

            # Save PM2 process list
            echo "Saving PM2 process list..."
            pm2 save || {
              echo "ERROR: Failed to save PM2 process list"
              exit 1
            }

            # Verify the app is running
            sleep 3
            if ! pm2 show otto-front | grep -q "online"; then
              echo "ERROR: Application is not running!"
              pm2 logs otto-front --lines 50
              exit 1
            fi

            echo "Deployment completed successfully!"
            pm2 status
